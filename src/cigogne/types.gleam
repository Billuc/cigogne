import cigogne/internal/utils
import gleam/io
import gleam/list
import pog
import tempo
import tempo/naive_datetime

/// The errors returned by cigogne
pub type MigrateError {
  EnvVarError(name: String)
  UrlError(url: String)
  FileError(path: String)
  PatternError(error: String)
  FileNameError(path: String)
  CompoundError(errors: List(MigrateError))
  ContentError(path: String, error: String)
  PGOTransactionError(error: pog.TransactionError)
  PGOQueryError(error: pog.QueryError)
  NoResultError
  SchemaQueryError(error: String)
  NoMigrationToApplyError
  NoMigrationToRollbackError
  MigrationNotFoundError(timestamp: tempo.NaiveDateTime, name: String)
  DateParseError(date: String)
  NameTooLongError(name: String)
}

/// Migrations are often generated by reading migration files.  
/// However, we allow you to create your own Migrations
pub type Migration {
  Migration(
    path: String,
    timestamp: tempo.NaiveDateTime,
    name: String,
    queries_up: List(String),
    queries_down: List(String),
  )
}

/// Print a MigrateError to the stderr
pub fn print_migrate_error(error: MigrateError) -> Nil {
  case error {
    CompoundError(suberrors) -> {
      io.println_error("[")
      list.each(suberrors, print_migrate_error)
      io.println_error("]")
    }
    ContentError(path, message) ->
      io.println_error(
        "At [" <> path <> "]: Content wasn't right <" <> message <> ">",
      )
    EnvVarError(name) -> io.println_error("Couldn't find env var " <> name)
    FileError(path) ->
      io.println_error(
        "Couldn't access file at path ["
        <> path
        <> "]\nCheck the file or the parent folders exist and that you have the right permissions.",
      )
    FileNameError(path) ->
      io.println_error(
        "Migration filenames should have the format <MigrationNumber>-<MigrationName>.sql ! Got: ["
        <> path
        <> "]",
      )
    NoResultError ->
      io.println_error(
        "Got no result from DB (can't get last applied migration)",
      )
    PGOQueryError(suberror) ->
      io.println_error(utils.describe_query_error(suberror))
    PGOTransactionError(suberror) ->
      io.println_error(utils.describe_transaction_error(suberror))
    PatternError(message) -> io.println_error(message)
    UrlError(url) -> io.println_error("Database URL badly formatted: " <> url)
    SchemaQueryError(err) ->
      io.println_error("Error while querying schema : " <> err)
    NoMigrationToApplyError -> io.println_error("No migration to apply !")
    NoMigrationToRollbackError -> io.println_error("No migration to rollback !")
    MigrationNotFoundError(ts, name) ->
      io.println_error(
        "Migration not found [timestamp: "
        <> ts |> naive_datetime.to_string
        <> ", name: "
        <> name
        <> "]",
      )
    DateParseError(date) ->
      io.println_error("Date couldn't be properly parsed: " <> date)
    NameTooLongError(name) ->
      io.println_error(
        "Migration name should be no more than 255 characters: " <> name,
      )
  }
}
