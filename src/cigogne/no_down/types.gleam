import cigogne/internal/utils
import gleam/int
import gleam/io
import gleam/list
import gleam/string
import pog

/// The errors returned by cigogne
pub type MigrateError {
  EnvVarError(name: String)
  UrlError(url: String)
  FileError(path: String)
  PatternError(error: String)
  FileNameError(path: String)
  CompoundError(errors: List(MigrateError))
  ContentError(path: String, error: String)
  PGOTransactionError(error: pog.TransactionError)
  PGOQueryError(error: pog.QueryError)
  NoResultError
  SchemaQueryError(error: String)
  NoMigrationToApplyError
  NoAppliedMigrationError
  MigrationNotFoundError(index: Int, name: String)
  DateParseError(date: String)
  UnexpectedValueError(expected: String, got: String)
  ConflictingMigrationsError(index: Int, names: List(String))
}

/// Migrations are often generated by reading migration files.  
/// However, we allow you to create your own Migrations
pub type Migration {
  Migration(path: String, index: Int, name: String, queries: List(String))
}

/// Print a MigrateError to the stderr
pub fn print_migrate_error(error: MigrateError) -> Nil {
  case error {
    CompoundError(suberrors) -> {
      io.println_error("[")
      list.each(suberrors, print_migrate_error)
      io.println_error("]")
    }
    ContentError(path, message) ->
      io.println_error(
        "At [" <> path <> "]: Content wasn't right <" <> message <> ">",
      )
    EnvVarError(name) -> io.println_error("Couldn't find env var " <> name)
    FileError(path) ->
      io.println_error(
        "Couldn't access file at path ["
        <> path
        <> "]\nCheck the file or the parent folders exist and that you have the right permissions.",
      )
    FileNameError(path) ->
      io.println_error(
        "Migration filenames should have the format <MigrationNumber>-<MigrationName>.sql ! Got: ["
        <> path
        <> "]",
      )
    NoResultError ->
      io.println_error(
        "Got no result from DB (can't get last applied migration)",
      )
    PGOQueryError(suberror) ->
      io.println_error(utils.describe_query_error(suberror))
    PGOTransactionError(suberror) ->
      io.println_error(utils.describe_transaction_error(suberror))
    PatternError(message) -> io.println_error(message)
    UrlError(url) -> io.println_error("Database URL badly formatted: " <> url)
    SchemaQueryError(err) ->
      io.println_error("Error while querying schema : " <> err)
    NoMigrationToApplyError -> io.println_error("No migration to apply !")
    NoAppliedMigrationError ->
      io.println_error("No migration has been applied !")
    MigrationNotFoundError(index, name) ->
      io.println_error(
        "Migration not found [timestamp: "
        <> index |> int.to_string
        <> ", name: "
        <> name
        <> "]",
      )
    DateParseError(date) ->
      io.println_error("Date couldn't be properly parsed: " <> date)
    UnexpectedValueError(expected, got) ->
      io.println_error(
        "Unexpected value [expected: " <> expected <> ", got: " <> got <> "]",
      )
    ConflictingMigrationsError(index, names) ->
      io.println_error(
        "Conflicting migrations with index "
        <> index |> int.to_string
        <> " ["
        <> names |> string.join(", ")
        <> "]",
      )
  }
}
